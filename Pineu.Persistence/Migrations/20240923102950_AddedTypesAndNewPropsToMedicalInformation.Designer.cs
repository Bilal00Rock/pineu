// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pineu.Persistence.Context;

#nullable disable

namespace Pineu.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240923102950_AddedTypesAndNewPropsToMedicalInformation")]
    partial class AddedTypesAndNewPropsToMedicalInformation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AetiologyTypeMedicalInformation", b =>
                {
                    b.Property<short>("AetiologiesId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("MedicalInformationId")
                        .HasColumnType("char(36)");

                    b.HasKey("AetiologiesId", "MedicalInformationId");

                    b.HasIndex("MedicalInformationId");

                    b.ToTable("AetiologyTypeMedicalInformation");
                });

            modelBuilder.Entity("DefaultIngredientNutritionStatus", b =>
                {
                    b.Property<int>("IngredientsId")
                        .HasColumnType("int");

                    b.Property<Guid>("NutritionStatusesId")
                        .HasColumnType("char(36)");

                    b.HasKey("IngredientsId", "NutritionStatusesId");

                    b.HasIndex("NutritionStatusesId");

                    b.ToTable("DefaultIngredientNutritionStatus");
                });

            modelBuilder.Entity("MedicalInformationOtherDiseaseType", b =>
                {
                    b.Property<Guid>("MedicalInformationId")
                        .HasColumnType("char(36)");

                    b.Property<short>("OtherDiseaseId")
                        .HasColumnType("smallint");

                    b.HasKey("MedicalInformationId", "OtherDiseaseId");

                    b.HasIndex("OtherDiseaseId");

                    b.ToTable("MedicalInformationOtherDiseaseType");
                });

            modelBuilder.Entity("MedicalInformationPastYearComplaintType", b =>
                {
                    b.Property<Guid>("MedicalInformationId")
                        .HasColumnType("char(36)");

                    b.Property<short>("PastYearComplaintsId")
                        .HasColumnType("smallint");

                    b.HasKey("MedicalInformationId", "PastYearComplaintsId");

                    b.HasIndex("PastYearComplaintsId");

                    b.ToTable("MedicalInformationPastYearComplaintType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("fd98f5ef-1c0a-4c71-94c6-fcefa42fa0c0"),
                            RoleId = new Guid("37bb9548-71f3-4610-b41e-d31f11359848")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NutritionStatusUserIngredient", b =>
                {
                    b.Property<Guid>("NutritionStatusesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserIngredientsId")
                        .HasColumnType("char(36)");

                    b.HasKey("NutritionStatusesId", "UserIngredientsId");

                    b.HasIndex("UserIngredientsId");

                    b.ToTable("NutritionStatusUserIngredient");
                });

            modelBuilder.Entity("Pineu.Domain.Entities.DbBackups.DatabaseBackup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("DatabaseBackup", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Banner", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.DefaultIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Category")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishLabel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiLabel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("DefaultIngredient", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.DefaultMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("DefaultMedicine", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OffPercentage")
                        .HasColumnType("int");

                    b.Property<int>("ScoreCost")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.DoctorPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("VisitContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("VisitedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("DoctorPrescription", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.MedicalInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AetiologyDescription")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly?>("DiagnosisDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EegDate")
                        .HasColumnType("date");

                    b.Property<string>("EegResult")
                        .HasColumnType("longtext");

                    b.Property<short?>("EpilepsyConsciousnessTypeId")
                        .HasColumnType("smallint");

                    b.Property<short?>("EpilepsyMovementTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("EpilepsySecondType")
                        .HasColumnType("longtext");

                    b.Property<short?>("EpilepsyTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("EpilepticSyndrome")
                        .HasColumnType("longtext");

                    b.Property<string>("FaceFilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("FaceFileUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("FamilyDescription")
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("FirstSeizure")
                        .HasColumnType("date");

                    b.Property<short?>("FrequencyTypeId")
                        .HasColumnType("smallint");

                    b.Property<int?>("HospitalizationCount")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("HospitalizationDate")
                        .HasColumnType("date");

                    b.Property<int?>("HospitalizationDuration")
                        .HasColumnType("int");

                    b.Property<short?>("HospitalizationTimeUnitId")
                        .HasColumnType("smallint");

                    b.Property<string>("IdCardFilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("IdCardFileUrl")
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("LastSeizure")
                        .HasColumnType("date");

                    b.Property<bool?>("MedicationStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MedicineAvoidance")
                        .HasColumnType("longtext");

                    b.Property<string>("MedicineList")
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("OtherDiagnosticMeasuresDate")
                        .HasColumnType("date");

                    b.Property<string>("OtherDiagnosticMeasuresResult")
                        .HasColumnType("longtext");

                    b.Property<string>("OtherDiseaseList")
                        .HasColumnType("longtext");

                    b.Property<short?>("ParentFamilyRelationshipId")
                        .HasColumnType("smallint");

                    b.Property<DateOnly?>("PhotoResult")
                        .HasColumnType("date");

                    b.Property<short?>("SeizureConsciousnessTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("SeizureInjuryList")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SeizureInterval")
                        .HasColumnType("int");

                    b.Property<short?>("SeizureMovementTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("SeizureSecondType")
                        .HasColumnType("longtext");

                    b.Property<string>("SeizureSymptoms")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SeizureSymptomsFrequency")
                        .HasColumnType("int");

                    b.Property<short?>("SeizureTimeUnitId")
                        .HasColumnType("smallint");

                    b.Property<short?>("SeizureTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("SystemicDisease")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("YearlySeizureCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpilepsyConsciousnessTypeId");

                    b.HasIndex("EpilepsyMovementTypeId");

                    b.HasIndex("EpilepsyTypeId");

                    b.HasIndex("FrequencyTypeId");

                    b.HasIndex("HospitalizationTimeUnitId");

                    b.HasIndex("ParentFamilyRelationshipId");

                    b.HasIndex("SeizureConsciousnessTypeId");

                    b.HasIndex("SeizureMovementTypeId");

                    b.HasIndex("SeizureTimeUnitId");

                    b.HasIndex("SeizureTypeId");

                    b.ToTable("MedicalInformation", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.MentalStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MentalStatus", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.NutritionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("NutritionStatus", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte?>("MaritalStatus")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.Score", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte>("Action")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ScoreCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Score", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("944a8e74-2343-4416-94c3-e0b8bc6f71d5"),
                            Action = (byte)0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScoreCount = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fc476934-032a-4eef-a114-99d69a0f2feb"),
                            Action = (byte)1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScoreCount = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0a4c629a-a171-4792-86c6-378d1d242e52"),
                            Action = (byte)2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScoreCount = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c2c6ee85-db55-4625-ae15-3f14a1d68cb5"),
                            Action = (byte)3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScoreCount = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("af30e59a-6e08-44bc-85d8-cf3c2fad132b"),
                            Action = (byte)4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScoreCount = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.ScoreLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte>("Action")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Change")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("char(36)");

                    b.Property<int>("RemainingScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("ScoreLog", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.Seizure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActivityAtSeizureTime")
                        .HasColumnType("longtext");

                    b.Property<byte?>("AlcoholConsumption")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte?>("AmountOfFoodBeforeSeizure")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte?>("AmountOfPhysicalStatusBeforeSeizure")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("AttackTypeList")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FoodBeforeSeizure")
                        .HasColumnType("longtext");

                    b.Property<string>("GeneralStatusAfterSeizure")
                        .HasColumnType("longtext");

                    b.Property<string>("GeneralStatusBeforeSeizure")
                        .HasColumnType("longtext");

                    b.Property<string>("InjuryList")
                        .HasColumnType("longtext");

                    b.Property<byte?>("MentalStatusAfterSeizure")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte?>("MentalStatusBeforeSeizure")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("SeizureDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SeizureDuration")
                        .HasColumnType("int");

                    b.Property<string>("SeverityOfInjury")
                        .HasColumnType("longtext");

                    b.Property<byte?>("SleepQualityAtTheNightBeforeSeizure")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte?>("SmokingConsumption")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Seizure", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.SleepStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<byte>("Value")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("SleepStatus", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.UserDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("UserDiscount", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.UserIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte>("Category")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("UserIngredient", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.UserMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("UserMedicine", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.WorkoutStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<byte>("Value")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("WorkoutStatus", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Medical.CurrentAntiepilepticMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Complications")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("DateTimeUnitTypeId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("DurationOfUseTypeId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("MedicalInformationId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserMedicineId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DateTimeUnitTypeId");

                    b.HasIndex("DurationOfUseTypeId");

                    b.HasIndex("MedicalInformationId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("UserMedicineId");

                    b.ToTable("CurrentAntiepilepticMedicine", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Medical.DrugConsumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DailyAmount")
                        .HasColumnType("int");

                    b.Property<short>("DateTimeUnitTypeId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DrugConsumptionDuration")
                        .HasColumnType("int");

                    b.Property<short>("DrugTypeId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("MedicalInformationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DateTimeUnitTypeId");

                    b.HasIndex("DrugTypeId");

                    b.HasIndex("MedicalInformationId");

                    b.ToTable("DrugConsumption", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Medical.FamilyDiseaseHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("FamilyDiseasesHistoryTypeId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("MedicalInformationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyDiseasesHistoryTypeId");

                    b.HasIndex("MedicalInformationId");

                    b.ToTable("FamilyDiseaseHistory", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Medical.OtherMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Complications")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("DateTimeUnitTypeId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("DurationOfUseTypeId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("MedicalInformationId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserMedicineId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DateTimeUnitTypeId");

                    b.HasIndex("DurationOfUseTypeId");

                    b.HasIndex("MedicalInformationId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("UserMedicineId");

                    b.ToTable("OtherMedicine", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Medical.PastAntiepilepticMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("DateTimeUnitTypeId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("DurationOfUseTypeId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("MedicalInformationId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonOfStop")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("StopDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserMedicineId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DateTimeUnitTypeId");

                    b.HasIndex("DurationOfUseTypeId");

                    b.HasIndex("MedicalInformationId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("UserMedicineId");

                    b.ToTable("PastAntiepilepticMedicine", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.SystemFiles.SystemFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SystemFile", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6814787-0f1e-4389-b48e-dff0f2b36ca7"),
                            CreatedAt = new DateTime(2024, 9, 23, 13, 59, 50, 297, DateTimeKind.Local).AddTicks(7522),
                            FilePath = "",
                            UpdatedAt = new DateTime(2024, 9, 23, 13, 59, 50, 297, DateTimeKind.Local).AddTicks(7533),
                            Url = ""
                        });
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Types.AetiologyType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("AetiologyType", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Types.ConsciousnessType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ConsciousnessType", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Types.DateTimeUnitType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("DateTimeUnitType", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Types.DrugType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("DrugType", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Types.DurationOfUseType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("DurationOfUseType", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Types.EpilepsyType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("EpilepsyType", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Types.FamilyDiseasesHistoryType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("FamilyDiseasesHistoryType", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Types.MovementType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("MovementType", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Types.OtherDiseaseType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("OtherDiseaseType", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Types.ParentFamilyRelationshipType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ParentFamilyRelationshipType", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Types.PastYearComplaintType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PastYearComplaintType", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Types.SeizureSymptomsFrequencyType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("SeizureSymptomsFrequencyType", (string)null);
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Types.SeizureType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FarsiName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("SeizureType", (string)null);
                });

            modelBuilder.Entity("Pineu.Persistence.AuthEntities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("37bb9548-71f3-4610-b41e-d31f11359848"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Pineu.Persistence.AuthEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd98f5ef-1c0a-4c71-94c6-fcefa42fa0c0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee5e6e5e-bed5-4a1e-9700-dfc20e3a078b",
                            CreatedAt = new DateTime(2024, 9, 23, 13, 59, 50, 198, DateTimeKind.Local).AddTicks(195),
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHKZDfpVug/7TT1kpoGnipD4ZgxlP3T8gN3OjVqFy8Bs++Ir0oaPnshXPuBDm8M9AQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "bc1e51e8-019d-4b6e-9c85-c251d99c19c7",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 9, 23, 13, 59, 50, 198, DateTimeKind.Local).AddTicks(211),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("a1450d11-4a4e-402a-a94e-59d29bba6f81"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6041e01-b800-40ff-b240-cbaed48dae4e",
                            CreatedAt = new DateTime(2024, 9, 23, 13, 59, 50, 109, DateTimeKind.Local).AddTicks(8087),
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "01234567410",
                            PasswordHash = "AQAAAAIAAYagAAAAEPlepsb71sxmbQpK+r69IIkJsfX0C4EwMNDHnIkY0sd4ZE4lgrL1VVArD7yEwPBw0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfbfbaeb-5efb-4348-aa07-cf3f8391428e",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 9, 23, 13, 59, 50, 109, DateTimeKind.Local).AddTicks(8087),
                            UserName = "01234567410"
                        });
                });

            modelBuilder.Entity("AetiologyTypeMedicalInformation", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.Types.AetiologyType", null)
                        .WithMany()
                        .HasForeignKey("AetiologiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.MainDomain.MedicalInformation", null)
                        .WithMany()
                        .HasForeignKey("MedicalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DefaultIngredientNutritionStatus", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.MainDomain.DefaultIngredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.MainDomain.NutritionStatus", null)
                        .WithMany()
                        .HasForeignKey("NutritionStatusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalInformationOtherDiseaseType", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.MainDomain.MedicalInformation", null)
                        .WithMany()
                        .HasForeignKey("MedicalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.Types.OtherDiseaseType", null)
                        .WithMany()
                        .HasForeignKey("OtherDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalInformationPastYearComplaintType", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.MainDomain.MedicalInformation", null)
                        .WithMany()
                        .HasForeignKey("MedicalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.Types.PastYearComplaintType", null)
                        .WithMany()
                        .HasForeignKey("PastYearComplaintsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Pineu.Persistence.AuthEntities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Pineu.Persistence.AuthEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Pineu.Persistence.AuthEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Pineu.Persistence.AuthEntities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Persistence.AuthEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Pineu.Persistence.AuthEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NutritionStatusUserIngredient", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.MainDomain.NutritionStatus", null)
                        .WithMany()
                        .HasForeignKey("NutritionStatusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.MainDomain.UserIngredient", null)
                        .WithMany()
                        .HasForeignKey("UserIngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.Discount", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.MainDomain.Store", "Store")
                        .WithMany("Discounts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.MedicalInformation", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.Types.ConsciousnessType", "EpilepsyConsciousnessType")
                        .WithMany()
                        .HasForeignKey("EpilepsyConsciousnessTypeId");

                    b.HasOne("Pineu.Domain.Entities.Types.MovementType", "EpilepsyMovementType")
                        .WithMany()
                        .HasForeignKey("EpilepsyMovementTypeId");

                    b.HasOne("Pineu.Domain.Entities.Types.EpilepsyType", "EpilepsyType")
                        .WithMany()
                        .HasForeignKey("EpilepsyTypeId");

                    b.HasOne("Pineu.Domain.Entities.Types.SeizureSymptomsFrequencyType", "FrequencyType")
                        .WithMany()
                        .HasForeignKey("FrequencyTypeId");

                    b.HasOne("Pineu.Domain.Entities.Types.DateTimeUnitType", "HospitalizationTimeUnit")
                        .WithMany()
                        .HasForeignKey("HospitalizationTimeUnitId");

                    b.HasOne("Pineu.Domain.Entities.Types.ParentFamilyRelationshipType", "ParentFamilyRelationship")
                        .WithMany()
                        .HasForeignKey("ParentFamilyRelationshipId");

                    b.HasOne("Pineu.Domain.Entities.Types.ConsciousnessType", "SeizureConsciousnessType")
                        .WithMany()
                        .HasForeignKey("SeizureConsciousnessTypeId");

                    b.HasOne("Pineu.Domain.Entities.Types.MovementType", "SeizureMovementType")
                        .WithMany()
                        .HasForeignKey("SeizureMovementTypeId");

                    b.HasOne("Pineu.Domain.Entities.Types.DateTimeUnitType", "SeizureTimeUnit")
                        .WithMany()
                        .HasForeignKey("SeizureTimeUnitId");

                    b.HasOne("Pineu.Domain.Entities.Types.SeizureType", "SeizureType")
                        .WithMany()
                        .HasForeignKey("SeizureTypeId");

                    b.Navigation("EpilepsyConsciousnessType");

                    b.Navigation("EpilepsyMovementType");

                    b.Navigation("EpilepsyType");

                    b.Navigation("FrequencyType");

                    b.Navigation("HospitalizationTimeUnit");

                    b.Navigation("ParentFamilyRelationship");

                    b.Navigation("SeizureConsciousnessType");

                    b.Navigation("SeizureMovementType");

                    b.Navigation("SeizureTimeUnit");

                    b.Navigation("SeizureType");
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.ScoreLog", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.MainDomain.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.UserDiscount", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.MainDomain.Discount", "Discount")
                        .WithMany("UserDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Medical.CurrentAntiepilepticMedicine", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.Types.DateTimeUnitType", "DateTimeUnitType")
                        .WithMany()
                        .HasForeignKey("DateTimeUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.Types.DurationOfUseType", "DurationOfUseType")
                        .WithMany()
                        .HasForeignKey("DurationOfUseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.MainDomain.MedicalInformation", "MedicalInformation")
                        .WithMany("CurrentAntiepilepticMedicines")
                        .HasForeignKey("MedicalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.MainDomain.DefaultMedicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.HasOne("Pineu.Domain.Entities.MainDomain.UserMedicine", "UserMedicine")
                        .WithMany()
                        .HasForeignKey("UserMedicineId");

                    b.Navigation("DateTimeUnitType");

                    b.Navigation("DurationOfUseType");

                    b.Navigation("MedicalInformation");

                    b.Navigation("Medicine");

                    b.Navigation("UserMedicine");
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Medical.DrugConsumption", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.Types.DateTimeUnitType", "DateTimeUnitType")
                        .WithMany()
                        .HasForeignKey("DateTimeUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.Types.DrugType", "DrugType")
                        .WithMany()
                        .HasForeignKey("DrugTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.MainDomain.MedicalInformation", "MedicalInformation")
                        .WithMany("DrugConsumption")
                        .HasForeignKey("MedicalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DateTimeUnitType");

                    b.Navigation("DrugType");

                    b.Navigation("MedicalInformation");
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Medical.FamilyDiseaseHistory", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.Types.FamilyDiseasesHistoryType", "FamilyDiseasesHistoryType")
                        .WithMany()
                        .HasForeignKey("FamilyDiseasesHistoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.MainDomain.MedicalInformation", "MedicalInformation")
                        .WithMany("FamilyDiseaseHistory")
                        .HasForeignKey("MedicalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamilyDiseasesHistoryType");

                    b.Navigation("MedicalInformation");
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Medical.OtherMedicine", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.Types.DateTimeUnitType", "DateTimeUnitType")
                        .WithMany()
                        .HasForeignKey("DateTimeUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.Types.DurationOfUseType", "DurationOfUseType")
                        .WithMany()
                        .HasForeignKey("DurationOfUseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.MainDomain.MedicalInformation", "MedicalInformation")
                        .WithMany("OtherMedicines")
                        .HasForeignKey("MedicalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.MainDomain.DefaultMedicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.HasOne("Pineu.Domain.Entities.MainDomain.UserMedicine", "UserMedicine")
                        .WithMany()
                        .HasForeignKey("UserMedicineId");

                    b.Navigation("DateTimeUnitType");

                    b.Navigation("DurationOfUseType");

                    b.Navigation("MedicalInformation");

                    b.Navigation("Medicine");

                    b.Navigation("UserMedicine");
                });

            modelBuilder.Entity("Pineu.Domain.Entities.Medical.PastAntiepilepticMedicine", b =>
                {
                    b.HasOne("Pineu.Domain.Entities.Types.DateTimeUnitType", "DateTimeUnitType")
                        .WithMany()
                        .HasForeignKey("DateTimeUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.Types.DurationOfUseType", "DurationOfUseType")
                        .WithMany()
                        .HasForeignKey("DurationOfUseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.MainDomain.MedicalInformation", "MedicalInformation")
                        .WithMany("PastAntiepilepticMedicines")
                        .HasForeignKey("MedicalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pineu.Domain.Entities.MainDomain.DefaultMedicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.HasOne("Pineu.Domain.Entities.MainDomain.UserMedicine", "UserMedicine")
                        .WithMany()
                        .HasForeignKey("UserMedicineId");

                    b.Navigation("DateTimeUnitType");

                    b.Navigation("DurationOfUseType");

                    b.Navigation("MedicalInformation");

                    b.Navigation("Medicine");

                    b.Navigation("UserMedicine");
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.Discount", b =>
                {
                    b.Navigation("UserDiscounts");
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.MedicalInformation", b =>
                {
                    b.Navigation("CurrentAntiepilepticMedicines");

                    b.Navigation("DrugConsumption");

                    b.Navigation("FamilyDiseaseHistory");

                    b.Navigation("OtherMedicines");

                    b.Navigation("PastAntiepilepticMedicines");
                });

            modelBuilder.Entity("Pineu.Domain.Entities.MainDomain.Store", b =>
                {
                    b.Navigation("Discounts");
                });
#pragma warning restore 612, 618
        }
    }
}
